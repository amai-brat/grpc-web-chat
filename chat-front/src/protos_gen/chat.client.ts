// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "chat.proto" (package "chat", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ChatService } from "./chat";
import type { MessageResponse } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./google/protobuf/empty";
import type { MessageRequest } from "./chat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service chat.ChatService
 */
export interface IChatServiceClient {
    /**
     * @generated from protobuf rpc: SendMessage(chat.MessageRequest) returns (google.protobuf.Empty);
     */
    sendMessage(input: MessageRequest, options?: RpcOptions): UnaryCall<MessageRequest, Empty>;
    /**
     * @generated from protobuf rpc: GetMessages(google.protobuf.Empty) returns (stream chat.MessageResponse);
     */
    getMessages(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, MessageResponse>;
}
/**
 * @generated from protobuf service chat.ChatService
 */
export class ChatServiceClient implements IChatServiceClient, ServiceInfo {
    typeName = ChatService.typeName;
    methods = ChatService.methods;
    options = ChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SendMessage(chat.MessageRequest) returns (google.protobuf.Empty);
     */
    sendMessage(input: MessageRequest, options?: RpcOptions): UnaryCall<MessageRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MessageRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMessages(google.protobuf.Empty) returns (stream chat.MessageResponse);
     */
    getMessages(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, MessageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, MessageResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
